name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Added macOS to ensure cross-platform consistency
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: Run Benchmark Executable
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        executable="Aligned_vs_Unaligned_Memory_Access"  # Base executable name
        
        if [ "$RUNNER_OS" == "Windows" ]; then
          executable="Aligned_vs_Unaligned_Memory_Access.exe"  # Windows-specific
          executable_path="${{ github.workspace }}\\build\\${{ matrix.build_type }}\\$executable"
        else
          executable_path="${{ github.workspace }}/build/$executable"
        fi

        # Check if executable exists and then run it
        echo "Checking if executable exists: $executable_path"
        if [ -f "$executable_path" ]; then
          echo "Executable found, running it"
          # Run the benchmark, pass necessary flags for size, offset, iterations, etc.
          "$executable_path" --size 10000000 --offset 3 --iterations 1000 --trials 5
        else
          echo "Executable not found: $executable_path"
          exit 1  # Fail if the executable isn't found
        fi

    - name: Cache Flush and Ensure Memory Consistency
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Flush the cache before running benchmarks on Linux/macOS
          echo "Flushing the cache on $RUNNER_OS"
          # You can use `clflush` or similar for cache flushing or memory barrier operations
          # On Linux/macOS, ensure that your code handles proper flushing and SIMD barriers
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Ensure MSVC handles flushing correctly
          echo "Flushing the cache on Windows"
          # Implement MSVC cache flush or barriers if required
        fi
